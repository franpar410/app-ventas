pipeline {
    agent any
    stages {

        stage('Build Docker Image') {
            agent {
                docker { image 'docker:24.0.7-cli' }
            }
            environment {
                IMAGE_NAME = "my-php-app"
                IMAGE_TAG = "latest"
            }
            steps {
                script {
                    sh '''
                        echo "üîß Construyendo imagen Docker..."
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                    '''
                }
            }
        }

        stage('Scan Docker Image with Trivy') {
            agent {
                docker {
                    image 'aquasec/trivy:latest'
                    args '-v /var/run/docker.sock:/var/run/docker.sock -u root'
                }
            }
            environment {
                IMAGE_NAME = "my-php-app"
                IMAGE_TAG = "latest"
                SEVERITY = "HIGH,CRITICAL"
            }
            steps {
                script {
                    try {
                        // Escaneo de la imagen reci√©n construida
                        sh '''
                            echo "üîç Ejecutando an√°lisis de imagen Docker con Trivy..."
                            trivy image ${IMAGE_NAME}:${IMAGE_TAG} \
                                --severity ${SEVERITY} \
                                --format json \
                                --output trivy-report.json \
                                --exit-code 0 \
                                --ignore-unfixed
                        '''

                        // Mostrar resultados legibles
                        sh 'trivy image ${IMAGE_NAME}:${IMAGE_TAG} --severity ${SEVERITY} --exit-code 0 --ignore-unfixed'

                        // Contar vulnerabilidades encontradas
                        def vulnCount = sh(
                            script: "jq '.Results[].Vulnerabilities | length' trivy-report.json | awk '{s+=$1} END {print s}'",
                            returnStdout: true
                        ).trim()

                        if (vulnCount.toInteger() > 0) {
                            echo "‚ö†Ô∏è Se encontraron ${vulnCount} vulnerabilidades de severidad ${SEVERITY}."
                            // Puedes elegir:
                            unstable("Vulnerabilidades detectadas por Trivy")
                            // Si prefieres bloquear el build, reemplaza por:
                            // error("Build bloqueado por vulnerabilidades cr√≠ticas detectadas")
                        } else {
                            echo "‚úÖ No se encontraron vulnerabilidades cr√≠ticas."
                        }

                    } catch (err) {
                        unstable(message: "Error durante el an√°lisis de Trivy")
                    }
                }
            }
        }

        stage('Deploy') {
            agent {
                docker { image 'php:8.2-cli' }
            }
            steps {
                sh 'echo "üöÄ Desplegando aplicaci√≥n..."'
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'trivy-report.json', fingerprint: true
        }
    }
}
