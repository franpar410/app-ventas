pipeline {
    agent any

    environment {
        FAIL_ON_SEVERITY   = 'HIGH'          // Pol√≠tica de bloqueo: CRITICAL, HIGH, MEDIUM, LOW
        SONARQUBE_IMAGE    = 'sonarqube:latest'
        SONARQUBE_CONTAINER= 'sonarqube-server'
        SONARQUBE_PORT     = '9000'
        SONARQUBE_URL      = "http://localhost:${SONARQUBE_PORT}"
        SONAR_PROJECT_KEY  = 'app-ventas'
        SONAR_PROJECT_NAME = 'App Ventas'
        SONAR_TOKEN        = credentials('sonar-token') // Configurar en Jenkins -> Credentials
    }

    triggers {
        githubPush()
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/franpar410/app-ventas.git'
            }
        }

        stage('Setup Python Environment') {
            steps {
                sh '''
                    docker run --rm -v $PWD:/src -w /src python:3.11 bash -c "
                        python3 -m venv venv
                        . venv/bin/activate
                        pip install -r requirements.txt || echo 'No requirements.txt'
                    "
                '''
            }
        }

        stage('Build') {
            steps {
                echo 'üèóÔ∏è  Este es un build de prueba'
                sh 'echo "Hola desde Jenkins!"'
            }
        }

        /* -------------------------------- */
        /* üöÄ Iniciar contenedor SonarQube  */
        /* -------------------------------- */
        stage('Start SonarQube Container') {
            steps {
                script {
                    echo "üì¶ Iniciando contenedor de SonarQube..."

                    // Detener contenedor previo si existe
                    sh """
                        if [ \$(docker ps -aq -f name=${SONARQUBE_CONTAINER}) ]; then
                            echo 'üßπ Deteniendo SonarQube previo...'
                            docker rm -f ${SONARQUBE_CONTAINER} || true
                        fi
                    """

                    // Iniciar nuevo contenedor
                    sh """
                        docker run -d --name ${SONARQUBE_CONTAINER} \
                            -p ${SONARQUBE_PORT}:9000 \
                            ${SONARQUBE_IMAGE}
                    """

                    // Esperar hasta que SonarQube est√© accesible
                    echo "‚è≥ Esperando que SonarQube inicie..."
                    timeout(time: 2, unit: 'MINUTES') {
                        waitUntil {
                            def status = sh(script: "curl -s -o /dev/null -w '%{http_code}' ${SONARQUBE_URL}/api/system/status || true", returnStdout: true).trim()
                            echo "üì° Estado actual SonarQube: ${status}"
                            return status == '200'
                        }
                    }
                    echo "‚úÖ SonarQube listo en ${SONARQUBE_URL}"
                }
            }
        }

        /* ------------------------------------- */
        /* üîç Static Code Analysis (SonarQube)   */
        /* ------------------------------------- */
        stage('Static Code Analysis (SonarQube)') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:latest'
                    args "-v $WORKSPACE:/usr/src"
                }
            }
            steps {
                script {
                    echo "üö¶ Ejecutando an√°lisis con SonarQube Scanner..."

                    sh '''
                        sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.python.version=3.11 \
                            -Dsonar.qualitygate.wait=true \
                            -Dsonar.exclusions=tests/**,**/migrations/**,**/legacy/**
                    '''
                }
            }

            post {
                always {
                    echo 'üìÑ An√°lisis SonarQube completado.'
                }
                success {
                    echo '‚úÖ SonarQube no report√≥ vulnerabilidades cr√≠ticas.'
                }
                unsuccessful {
                    script {
                        echo "üö® El an√°lisis de SonarQube fall√≥ el Quality Gate."
                        def qg = waitForQualityGate()
                        echo "üìä Estado del Quality Gate: ${qg.status}"

                        if (qg.status != 'OK') {
                            error("‚ùå SonarQube detect√≥ vulnerabilidades de nivel ${env.FAIL_ON_SEVERITY} o superior. Bloqueando pipeline.")
                        }
                    }
                }
            }
        }

        stage('Push to Registry (optional)') {
            when { expression { return false } }
            steps { sh 'echo "Pushing to Docker Registry..."' }
        }

        stage('Deploy') {
            steps { sh 'echo "Deploying to environment..."' }
        }
    }

    post {
        always {
            script {
                echo 'üßπ Deteniendo contenedor de SonarQube...'
                sh 'docker rm -f ${SONARQUBE_CONTAINER} || true'
            }
            echo 'üèÅ Pipeline finalizado.'
        }
    }
}
